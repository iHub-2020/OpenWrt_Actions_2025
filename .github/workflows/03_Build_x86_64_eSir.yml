#=================================================
# Description: Build OpenWrt using GitHub Actions
# License: MIT
# Author: Reyanmatic
# Website: https://www.reyanmatic.com
#=================================================

name: 03_Build_x86_64_eSir

on: 
  repository_dispatch:   # 支持通过API外部触发
  workflow_dispatch:     # 支持手动一键触发

jobs:
  build:
    # GitHub官方runner不支持直接debian-11，仅支持ubuntu-20.04/22.04等
    runs-on: ubuntu-latest

    steps:
    # 1. 编译前空间检查（查看系统盘实际可用空间，便于对比优化效果）
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    # 2. 重新挂载大空间分区，突破GitHub Actions默认工作目录14G空间限制
    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with: 
        # 根分区至少保留4G，避免系统环境损坏
        root-reserve-mb: 4096
        # 仅保留1MB swap区，节约空间
        swap-size-mb: 1
        # 移除.net相关包
        remove-dotnet: 'true'
        # 移除android相关包
        remove-android: 'true'    
        remove-haskell: 'true'
        remove-codeql: 'true'
        # 移除docker镜像
        remove-docker-images: 'true'
        # 以上参数均为安全释放空间，避免影响正常编译

    # 3. 空间释放后的再次检查，确认空间已扩容
    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    # 4. 拉取代码仓库（本项目workflow和自定义脚本/配置等）
    - name: Checkout
      uses: actions/checkout@v4

    # 5. 初始化编译环境并安装必要依赖
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive # 防止apt安装时出现交互提示
      run: |
        # 5.1 更新apt源，防止后续安装失败
        sudo -E apt-get -qq update
        # 5.2 安装OpenWrt/lede编译所需的所有依赖软件包
        sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \
        genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev \
        libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \
        libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf \
        python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion \
        swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        # 5.3 自动卸载编译不再需要的包和清理缓存，加快后续操作
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        # 5.4 设置系统时区为上海，便于日志和固件时间戳对齐
        sudo timedatectl set-timezone "Asia/Shanghai"
        # 5.5 修正GitHub Actions工作目录权限，防止因文件属主问题导致编译失败
        sudo chown $USER:$GROUPS $GITHUB_WORKSPACE

    # 6. 克隆主仓库源码，并引入额外feeds
    - name: Clone source code and configure feeds
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: |
        # 克隆主仓库源码到openwrt目录（浅克隆，节省时间和空间）
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        # 可选：按需添加第三方软件源
        echo "src-git reyan https://github.com/iHub-2020/openwrt-reyan_new.git" >> ./feeds.conf.default

    # 7. 更新和安装 feeds（拉取所有软件包索引和依赖）
    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        # 更新所有feeds源，保证包列表为最新版
        ./scripts/feeds update -a
        # 安装所有可用feeds包（解包到build目录）
        ./scripts/feeds install -a

    # 8. 配置定制化设置
    - name: Configuration Customization - Build_x86_64
      env:
        CONFIG_FILE: 'x86_64.config'
      run: |
        # 如存在自定义.config则覆盖默认配置
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        # 执行定制脚本（如打补丁、自定义logo、精简package等）
        chmod +x ./customize.sh && ./customize.sh
        # 生成最终.config（自动合并所有依赖）
        cd openwrt && make defconfig

    # 9. 下载全部依赖包并清理无效下载
    - name: Download package
      working-directory: ./openwrt
      run: |
        # 使用多线程下载所有源码依赖包，加速拉取（包括内核、各类package）
        make download -j$(nproc)
        # 删除下载失败或损坏的小文件，防止后续编译失败
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        # 再次检查磁盘空间，便于分析空间瓶颈
        df -hT

    # 10. 正式编译固件并清理中间产物
    - name: Build firmware
      working-directory: ./openwrt
      run: |
        # 输出CPU线程数，便于日志分析
        echo -e "$(nproc) thread build."
        # 使用最大线程数详细编译全部目标（V=s可输出详细日志，便于云端debug）
        make -j$(nproc) V=s

    # 11. 上传编译结果（artifact可下载固件包和日志）
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt
        path: openwrt/bin
