#=================================================
# Description: Build OpenWrt using GitHub Actions
# License: MIT
# Author: Reyanmatic
# Website: https://www.reyanmatic.com
#=================================================

name: 02_Build_R2S_P3TERX

on:
  repository_dispatch:
    types: [Build_R2S_P3TERX]
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: R2S.config
  DIY_P1_SH: diy-part1.sh
  DIY_P3_SH: diy-part3.sh
  UPLOAD_BIN_DIR: 'false'
  UPLOAD_FIRMWARE: 'true'
  UPLOAD_RELEASE: 'true'
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 编译前空间检查
      - name: Before freeing up disk space
        run: |
          echo "Before freeing up disk space"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="

      # 2. maximize-build-space：LVM重新挂载build空间，突破14G限制，并清理指定大目录
      - name: Freeing up disk space
        uses: easimon/maximize-build-space@master
        with:
          # root-reserve-mb: 保留根分区剩余空间（以MB计），建议≥2048，避免apt等系统操作失败
          # swap-size-mb: swap设置为1MB即可最大化可用空间
          # 只移除无关大目录，对依赖无影响
          root-reserve-mb: 4096
          swap-size-mb: 1
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          # 其它参数保持默认，确保最大空间且系统依赖不丢失

      # 3. 空间释放后的检查
      - name: Free up disk space complete
        run: |
          echo "Free up disk space complete"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="

      # 4. 拉取仓库
      - name: Checkout
        uses: actions/checkout@v4

      # 5. 初始化环境，安装依赖
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo apt-get install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \
          genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev \
          libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \
          libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf \
          python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion \
          swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo chown $USER:$GROUPS $GITHUB_WORKSPACE
      
      # 6. 克隆主源码仓库
      - name: Clone source code
        working-directory: ./
        run: |
          df -hT $PWD
          git clone ${REPO_URL} -b ${REPO_BRANCH} openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      # 7. 加载自定义feeds（可选）
      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      # 8. 更新 feeds
      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      # 9. 安装 feeds
      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      # 10. 配置定制化与深度自定义（务必在 make defconfig 前执行）
      - name: Configuration & Customization (核心步骤)
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && cp $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P3_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P3_SH

      # 11. 补全配置并下载dl依赖包
      - name: Make defconfig & Download packages
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

# 12. 编译固件（极其依赖空间优化，请保证前面空间优化步骤已完成）
      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          # ========================= 注释详解 =========================
          # 本步骤为整个工作流的核心：进行OpenWrt固件编译。
          # ...（省略，其余注释和命令同你原本代码）...
          # ===========================================================
          set -e
          echo ">>> 检测CPU核心数，准备并发编译..."
          echo "CPU核心数: $(nproc)"
          echo ">>> 开始多核并发编译..."
          if ! make -j$(nproc); then
            echo "!!! 多核编译失败，尝试单核编译..."
            if ! make -j1; then
              echo "!!! 单核也失败，输出详细日志..."
              make -j1 V=s
              echo "!!! 编译彻底失败，终止流程。"
              exit 1
            fi
          fi
          echo ">>> 编译成功，写入输出变量"
          echo "status=success" >> $GITHUB_OUTPUT
          # 提取设备名
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          # 写入编译日期
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      # 13. 查看磁盘空间
      - name: Check space usage
        if: steps.compile.outputs.status == 'success'
        run: df -hT
      
      # 14. 上传 bin 目录（可选）
      - name: Upload bin directory
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success'
        with:
          name: OpenWrt_bin_x86${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin
      
      # 15. 整理固件文件，只保留最终固件
      - name: Organize files
        id: organize
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
      
      # 16. 上传固件目录
      - name: Upload firmware directory
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && steps.organize.outputs.status == 'success'
        with:
          name: OpenWrt_firmware_x86${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}
      
      # 17. 生成 Release 标签
      - name: Generate release tag
        id: tag
        if: steps.compile.outputs.status == 'success'
        run: |
          echo "release_tag=x86-$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "status=success" >> $GITHUB_OUTPUT
      
      # 18. 上传固件到 GitHub Release（**已优化，兼容私有库和 dispatch 场景**）
      - name: Upload firmware to release
        uses: softprops/action-gh-release@v2
        if: steps.compile.outputs.status == 'success' && steps.tag.outputs.status == 'success'
        with:
          token: ${{ secrets.GH_RELEASE_TOKEN }}            # ★ 改这里！使用自定义PAT
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*
        # 保留原有注释，说明token已切换为PAT
        # 注1：token的生成：Personal profile->Setting->Developer Setting->Personal access tokens
        # 注2：GH_RELEASE_TOKEN 需在仓库Settings-Secrets中创建，权限至少为repo或contents:write
      
      # 19. 删除历史 workflow 运行记录，仅保留最近2次
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        if: steps.compile.outputs.status == 'success'
        with:
          retain_days: 0
          keep_minimum_runs: 2
      
      # 20. 删除旧的 Releases，只保留最新3次
      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.3.3
        if: steps.compile.outputs.status == 'success'
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}      # ★ 这里建议也同步用PAT
